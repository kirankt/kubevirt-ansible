---
# CDI Deployment
- name: Check if namespace {{ cdi_namespace }} exists
  shell: "{{ cluster_command }} get ns {{ cdi_namespace }}"
  ignore_errors: yes
  register: ns

- name: Create {{ cdi_namespace }} namespace using kubectl
  shell: kubectl create namespace {{ cdi_namespace }}
  when: ns.rc != 0
        and platform == "kubernetes"

- name: Create {{ cdi_namespace }} namespace using oc
  shell: oc new-project {{ cdi_namespace }}
  when: ns.rc != 0
        and platform == "openshift"

- name: Render {{ cdi_namespace }} ResourceQuota deployment yaml
  template:
    src:  cdi-resourcequota.yml
    dest: /tmp/cdi-provision-resourcequota.yml

- name: Create {{ cdi_namespace }} ResourceQuota
  command: "{{ cluster_command }} apply -f /tmp/cdi-provision-resourcequota.yml -n {{ cdi_namespace }}"

- name: Check for cdi-controller.yaml.j2 template in {{ cdi_template_dir }}
  stat:
    path: "{{ cdi_template_dir }}/cdi-controller.yaml.j2"
  register: byo_template

- name: Render CDI deployment yaml from template in {{ cdi_template_dir }}
  template:
    src: "cdi-controller.yaml.j2"
    dest: "/tmp/cdi-controller.yml"
  when: byo_template.stat.exists == true

- name: Get CDI from {{ cdi_release_manifest_url }}
  block:
  - name: Check for cdi-controller.yaml.j2 template in /tmp
    stat:
      path: "/tmp/cdi-controller.yaml.j2"
    register: downloaded_template

  - name: Download CDI Template
    get_url:
      url: "{{ cdi_release_manifest_url }}/{{ release_tag }}/cdi-controller.yaml.j2"
      dest: "/tmp/cdi-controller.yaml.j2"
    when: downloaded_template.stat.exists == false

  - name: Render CDI deployment yaml
    template:
      src: "/tmp/cdi-controller.yaml.j2"
      dest: "/tmp/cdi-controller.yaml"

  when: byo_template.stat.exists == false

- name: Create CDI deployment
  command: "{{ cluster_command }} apply -f /tmp/cdi-controller.yaml"

- name: Enable privileged containers in the security context
  command: "oc adm policy add-scc-to-user privileged -z cdi-sa -n {{ cdi_namespace }}"
  when: platform == "openshift"
